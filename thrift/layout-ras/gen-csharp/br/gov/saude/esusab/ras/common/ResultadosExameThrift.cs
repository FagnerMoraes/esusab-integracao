/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.common
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResultadosExameThrift : TBase
  {
    private string _exame;
    private long _dataSolicitacao;
    private long _dataRealizacao;
    private long _dataResultado;
    private string _resultado;
    private List<ResultadoExameThrift> _exameResultadoEspecifico;

    public string Exame
    {
      get
      {
        return _exame;
      }
      set
      {
        __isset.exame = true;
        this._exame = value;
      }
    }

    public long DataSolicitacao
    {
      get
      {
        return _dataSolicitacao;
      }
      set
      {
        __isset.dataSolicitacao = true;
        this._dataSolicitacao = value;
      }
    }

    public long DataRealizacao
    {
      get
      {
        return _dataRealizacao;
      }
      set
      {
        __isset.dataRealizacao = true;
        this._dataRealizacao = value;
      }
    }

    public long DataResultado
    {
      get
      {
        return _dataResultado;
      }
      set
      {
        __isset.dataResultado = true;
        this._dataResultado = value;
      }
    }

    public string Resultado
    {
      get
      {
        return _resultado;
      }
      set
      {
        __isset.resultado = true;
        this._resultado = value;
      }
    }

    public List<ResultadoExameThrift> ExameResultadoEspecifico
    {
      get
      {
        return _exameResultadoEspecifico;
      }
      set
      {
        __isset.exameResultadoEspecifico = true;
        this._exameResultadoEspecifico = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool exame;
      public bool dataSolicitacao;
      public bool dataRealizacao;
      public bool dataResultado;
      public bool resultado;
      public bool exameResultadoEspecifico;
    }

    public ResultadosExameThrift() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Exame = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                DataSolicitacao = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                DataRealizacao = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                DataResultado = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Resultado = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  ExameResultadoEspecifico = new List<ResultadoExameThrift>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    ResultadoExameThrift _elem2;
                    _elem2 = new ResultadoExameThrift();
                    _elem2.Read(iprot);
                    ExameResultadoEspecifico.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ResultadosExameThrift");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Exame != null && __isset.exame) {
          field.Name = "exame";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Exame);
          oprot.WriteFieldEnd();
        }
        if (__isset.dataSolicitacao) {
          field.Name = "dataSolicitacao";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DataSolicitacao);
          oprot.WriteFieldEnd();
        }
        if (__isset.dataRealizacao) {
          field.Name = "dataRealizacao";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DataRealizacao);
          oprot.WriteFieldEnd();
        }
        if (__isset.dataResultado) {
          field.Name = "dataResultado";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DataResultado);
          oprot.WriteFieldEnd();
        }
        if (Resultado != null && __isset.resultado) {
          field.Name = "resultado";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Resultado);
          oprot.WriteFieldEnd();
        }
        if (ExameResultadoEspecifico != null && __isset.exameResultadoEspecifico) {
          field.Name = "exameResultadoEspecifico";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ExameResultadoEspecifico.Count));
            foreach (ResultadoExameThrift _iter3 in ExameResultadoEspecifico)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ResultadosExameThrift(");
      bool __first = true;
      if (Exame != null && __isset.exame) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Exame: ");
        __sb.Append(Exame);
      }
      if (__isset.dataSolicitacao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataSolicitacao: ");
        __sb.Append(DataSolicitacao);
      }
      if (__isset.dataRealizacao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataRealizacao: ");
        __sb.Append(DataRealizacao);
      }
      if (__isset.dataResultado) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataResultado: ");
        __sb.Append(DataResultado);
      }
      if (Resultado != null && __isset.resultado) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Resultado: ");
        __sb.Append(Resultado);
      }
      if (ExameResultadoEspecifico != null && __isset.exameResultadoEspecifico) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExameResultadoEspecifico: ");
        __sb.Append(ExameResultadoEspecifico);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
